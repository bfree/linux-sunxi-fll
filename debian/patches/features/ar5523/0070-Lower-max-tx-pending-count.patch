From 7b3e0feb8a43e4f5d635d34f34ca0d4fcbb2d822 Mon Sep 17 00:00:00 2001
From: Pontus Fuchs <pontus.fuchs@gmail.com>
Date: Tue, 9 Oct 2012 19:53:08 +0200
Subject: [PATCH 70/82] Lower max tx pending count

Hopefully this will fix the problem with stuck TX queues.
---
 ar5523.c |    7 +++++--
 1 file changed, 5 insertions(+), 2 deletions(-)

--- a/drivers/net/wireless/ath/ar5523/ar5523.c
+++ b/drivers/net/wireless/ath/ar5523/ar5523.c
@@ -85,8 +85,8 @@
 #define	AR5523_DATA_TIMEOUT	10000
 #define	AR5523_CMD_TIMEOUT	1000
 
-#define AR5523_TX_DATA_COUNT		16
-#define AR5523_TX_DATA_RESTART_COUNT	4
+#define AR5523_TX_DATA_COUNT		4
+#define AR5523_TX_DATA_RESTART_COUNT	1
 #define AR5523_RX_DATA_COUNT		16
 #define AR5523_RX_DATA_REFILL_COUNT	8
 
@@ -1009,6 +1009,8 @@ static void ar5523_tx_work_locked(struct
 		mod_timer(&ar->tx_wd_timer, jiffies + AR5523_TX_WD_TIMEOUT);
 		atomic_inc(&ar->tx_nr_pending);
 
+		ar5523_dbg(ar, "TX Frame (%d pending)\n",
+			   atomic_read(&ar->tx_nr_pending));
 		error = usb_submit_urb(urb, GFP_KERNEL);
 		if (error) {
 			ar5523_err(ar, "error %d when submitting tx urb\n",
@@ -1028,6 +1030,7 @@ static void ar5523_tx_work(struct work_s
 {
 	struct ar5523 *ar = container_of(work, struct ar5523, tx_work);
 
+	ar5523_dbg(ar, "%s\n", __func__);
 	mutex_lock(&ar->mutex);
 	ar5523_tx_work_locked(ar);
 	mutex_unlock(&ar->mutex);
