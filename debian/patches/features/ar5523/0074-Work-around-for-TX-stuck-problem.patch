From 6d9f7643ebeb334927f6ad78c6ce182518567932 Mon Sep 17 00:00:00 2001
From: Pontus Fuchs <pontus.fuchs@gmail.com>
Date: Sat, 13 Oct 2012 10:47:46 +0200
Subject: [PATCH 74/82] Work around for TX stuck problem

If the USB transfer size is an exact multiple of 512 the TX
queues in FW gets stuck. Extend the transfer as a work around.

Also increase the number of frames sent to FW before halting
the queues.
---
 ar5523.c |   12 ++++++++++--
 ar5523.h |    4 ++--
 2 files changed, 12 insertions(+), 4 deletions(-)

--- a/drivers/net/wireless/ath/ar5523/ar5523.c
+++ b/drivers/net/wireless/ath/ar5523/ar5523.c
@@ -871,6 +871,14 @@ static void ar5523_tx_work_locked(struct
 
 		desc->txqid = cpu_to_be32(txqid);
 
+		/* If transfer size is a multiple of 512 bytes the FW's TX
+		 * queues gets stuck. Am I missing something or is this a
+		 * FW bug? Simply extending the transfer a few bytes solves
+		 * the problem.
+		 */
+		if (skb->len % 512 == 0)
+			skb_put(skb, 4);
+
 		usb_fill_bulk_urb(urb, ar->dev, ar5523_data_tx_pipe(ar->dev),
 				  skb->data, skb->len, ar5523_data_tx_cb, skb);
 
@@ -880,8 +888,8 @@ static void ar5523_tx_work_locked(struct
 		mod_timer(&ar->tx_wd_timer, jiffies + AR5523_TX_WD_TIMEOUT);
 		atomic_inc(&ar->tx_nr_pending);
 
-		ar5523_dbg(ar, "TX Frame (%d pending)\n",
-			   atomic_read(&ar->tx_nr_pending));
+		ar5523_dbg(ar, "TX Frame (%d pending) size %d\n",
+			   atomic_read(&ar->tx_nr_pending), skb->len);
 		error = usb_submit_urb(urb, GFP_KERNEL);
 		if (error) {
 			ar5523_err(ar, "error %d when submitting tx urb\n",
--- a/drivers/net/wireless/ath/ar5523/ar5523.h
+++ b/drivers/net/wireless/ath/ar5523/ar5523.h
@@ -56,8 +56,8 @@
 #define	AR5523_DATA_TIMEOUT	10000
 #define	AR5523_CMD_TIMEOUT	1000
 
-#define AR5523_TX_DATA_COUNT		4
-#define AR5523_TX_DATA_RESTART_COUNT	1
+#define AR5523_TX_DATA_COUNT		8
+#define AR5523_TX_DATA_RESTART_COUNT	2
 #define AR5523_RX_DATA_COUNT		16
 #define AR5523_RX_DATA_REFILL_COUNT	8
 
