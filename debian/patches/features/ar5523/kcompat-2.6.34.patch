add kernel 2.6.34 compatibility.

Changes-licensed-under: ISC
Signed-off-by: Stefan Lippers-Hollmann <s.l-h@gmx.de>

--- a/drivers/net/wireless/ath/ar5523/ar5523.c
+++ b/drivers/net/wireless/ath/ar5523/ar5523.c
@@ -870,7 +870,7 @@ static int ar5523_tx(struct ieee80211_hw
 }
 
 static int ar5523_add_interface(struct ieee80211_hw *hw,
-		struct ieee80211_if_init_conf *conf)
+		struct ieee80211_vif *vif)
 {
 	struct ar5523 *ar = hw->priv;
 
@@ -882,10 +882,10 @@ static int ar5523_add_interface(struct i
 		return -EOPNOTSUPP;
 	}
 
-	switch (conf->type) {
+	switch (vif->type) {
 	case NL80211_IFTYPE_STATION:
 	case NL80211_IFTYPE_MONITOR:
-		ar->mode = conf->type;
+		ar->mode = vif->type;
 		break;
 	default:
 		return -EOPNOTSUPP;
@@ -895,7 +895,7 @@ static int ar5523_add_interface(struct i
 }
 
 static void ar5523_remove_interface(struct ieee80211_hw *hw,
-		struct ieee80211_if_init_conf *conf)
+		struct ieee80211_vif *vif)
 {
 	struct ar5523 *ar = hw->priv;
 
@@ -1117,8 +1117,8 @@ static void ar5523_free_tx_cmds(struct a
 		struct ar5523_tx_cmd *cmd = &ar->tx_cmd[i];
 
 		usb_kill_urb(cmd->urb);
-		usb_buffer_free(ar->dev, AR5523_MAX_TXCMDSZ,
-				cmd->buf, cmd->urb->transfer_dma);
+		usb_free_coherent(ar->dev, AR5523_MAX_TXCMDSZ,
+				  cmd->buf, cmd->urb->transfer_dma);
 		usb_free_urb(cmd->urb);
 	}
 }
@@ -1137,8 +1137,8 @@ static int ar5523_alloc_tx_cmds(struct a
 			ar5523_err(ar, "could not allocate tx urb\n");
 			goto out;
 		}
-		cmd->buf = usb_buffer_alloc(ar->dev, AR5523_MAX_TXCMDSZ,
-					    GFP_KERNEL,
+		cmd->buf = usb_alloc_coherent(ar->dev, AR5523_MAX_TXCMDSZ,
+					      GFP_KERNEL,
 					    &cmd->urb->transfer_dma);
 		if (!cmd->buf) {
 			ar5523_err(ar, "could not allocate tx buffer\n");
@@ -1154,8 +1154,8 @@ static int ar5523_alloc_tx_cmds(struct a
  	while (--i >= 0) {
 		struct ar5523_tx_cmd *cmd = &ar->tx_cmd[i];
 
-		usb_buffer_free(ar->dev, AR5523_MAX_TXCMDSZ,
-				cmd->buf, cmd->urb->transfer_dma);
+		usb_free_coherent(ar->dev, AR5523_MAX_TXCMDSZ,
+				  cmd->buf, cmd->urb->transfer_dma);
 		usb_free_urb(cmd->urb);
 	}
 
@@ -1170,8 +1170,8 @@ static void ar5523_free_rx_cmds(struct a
 		struct ar5523_rx_cmd *cmd = &ar->rx_cmd[i];
 
 		usb_kill_urb(cmd->urb);
-		usb_buffer_free(ar->dev, AR5523_MAX_RXCMDSZ,
-				cmd->buf, cmd->urb->transfer_dma);
+		usb_free_coherent(ar->dev, AR5523_MAX_RXCMDSZ,
+				  cmd->buf, cmd->urb->transfer_dma);
 		usb_free_urb(cmd->urb);
 	}
 }
@@ -1190,9 +1190,9 @@ static int ar5523_alloc_rx_cmds(struct a
 			ar5523_err(ar, "could not allocate rx urb\n");
 			goto out;
 		}
-		cmd->buf = usb_buffer_alloc(ar->dev, AR5523_MAX_TXCMDSZ,
-					    GFP_KERNEL,
-					    &cmd->urb->transfer_dma);
+		cmd->buf = usb_alloc_coherent(ar->dev, AR5523_MAX_TXCMDSZ,
+					      GFP_KERNEL,
+					      &cmd->urb->transfer_dma);
 		if (!cmd->buf) {
 			ar5523_err(ar, "could not allocate rx buffer\n");
 			usb_free_urb(cmd->urb);
@@ -1208,8 +1208,8 @@ static int ar5523_alloc_rx_cmds(struct a
 		if (error) {
 			ar5523_err(ar, "error %d when submitting rx urb\n",
 				       error);
-			usb_buffer_free(ar->dev, AR5523_MAX_RXCMDSZ,
-					cmd->buf, cmd->urb->transfer_dma);
+			usb_free_coherent(ar->dev, AR5523_MAX_RXCMDSZ,
+					  cmd->buf, cmd->urb->transfer_dma);
 			usb_free_urb(cmd->urb);
 			return error;
 		}
@@ -1223,8 +1223,8 @@ static int ar5523_alloc_rx_cmds(struct a
 
 		usb_kill_urb(cmd->urb);
 
-		usb_buffer_free(ar->dev, AR5523_MAX_RXCMDSZ,
-				cmd->buf, cmd->urb->transfer_dma);
+		usb_free_coherent(ar->dev, AR5523_MAX_RXCMDSZ,
+				  cmd->buf, cmd->urb->transfer_dma);
 		usb_free_urb(cmd->urb);
 	}
 
