From e160a3c494086481028e2b72d34b1698e4767281 Mon Sep 17 00:00:00 2001
From: Pontus Fuchs <pontus.fuchs@gmail.com>
Date: Sun, 2 Sep 2012 10:34:11 +0200
Subject: [PATCH 09/82] Next

---
 ar5523.c |  351 +++++++-------------------------------------------------------
 ar5523.h |   29 ++----
 2 files changed, 48 insertions(+), 332 deletions(-)

--- a/drivers/net/wireless/ath/ar5523/ar5523.c
+++ b/drivers/net/wireless/ath/ar5523/ar5523.c
@@ -49,7 +49,6 @@
 enum {
 	AR5523_FLAG_PRE_FIRMWARE	= (1 << 0),
 	AR5523_FLAG_ABG			= (1 << 1),
-
 };
 
 #define AR5523_FIRMWARE_FILE	"uath-ar5523.bin"
@@ -136,9 +135,9 @@ struct ar5523 {
 	int			rxbufsz;
 
 	struct ieee80211_channel channels[14];
-	struct ieee80211_rate	 rates[12];
+	struct ieee80211_rate	rates[12];
 	struct ieee80211_supported_band band;
-	int			mode;
+	struct ieee80211_vif 	*vif;
 
 };
 
@@ -159,14 +158,11 @@ enum {
 };
 
 #define ar5523_dbg(ar, format, arg...)            \
-	dev_err(&(ar)->dev->dev, format, ## arg)
+	dev_dbg(&(ar)->dev->dev, format, ## arg)
 #define ar5523_err(ar, format, arg...)            \
 	dev_err(&(ar)->dev->dev, format, ## arg)
 #define ar5523_info(ar, format, arg...)            \
-	dev_err(&(ar)->dev->dev, format, ## arg)
-
-
-
+	dev_info(&(ar)->dev->dev, format, ## arg)
 
 /*
  * TX/RX command handling.
@@ -361,7 +357,6 @@ static int ar5523_cmd(struct ar5523 *ar,
 		
 		return error;
 	}
-	printk("Submitted cmd %02x id=%d\n", hdr->code, hdr->priv);
 
 	if (flags & AR5523_CMD_FLAG_READ) {
 		ar5523_dbg(ar, "Read CMD. Submit RX urb %p %p\n", cmd, ar);
@@ -392,7 +387,6 @@ static int ar5523_cmd(struct ar5523 *ar,
 static int ar5523_cmd_write(struct ar5523 *ar, u32 code, const void *data,
 		int len, int flags)
 {
-	printk("Write cmd %02x\n", code);
 	flags &= ~AR5523_CMD_FLAG_READ; 
 	return ar5523_cmd(ar, code, data, len, NULL, 0, flags);
 }
@@ -400,27 +394,10 @@ static int ar5523_cmd_write(struct ar552
 static int ar5523_cmd_read(struct ar5523 *ar, u32 code, const void *idata,
 		int ilen, void *odata, int olen, int flags)
 {
-	printk("Read cmd %02x\n", code);
 	flags |= AR5523_CMD_FLAG_READ;
 	return ar5523_cmd(ar, code, idata, ilen, odata, olen, flags);
 }
 
-static int ar5523_write_reg(struct ar5523 *ar, u32 reg, u32 val)
-{
-	struct ar5523_write_mac write;
-	int error;
-
-	write.reg = cpu_to_be32(reg);
-	write.len = 0;			/* 0 = single write */
-	*(__be32 *)write.data = cpu_to_be32(val);
-
-	error = ar5523_cmd_write(ar, AR5523_CMD_WRITE_MAC, &write,
-				 3 * sizeof(__be32), 0);
-	if (error)
-		ar5523_err(ar, "could not write register 0x%02x\n", reg);
-	return error;
-}
-
 static int
 ar5523_config(struct ar5523 *ar, u32 reg, u32 val)
 {
@@ -460,47 +437,6 @@ ar5523_config_multi(struct ar5523 *ar, u
 	return error;
 }
 
-#if 0
-
-static int ar5523_write_multi(struct ar5523 *ar, u32 reg,
-		const void *data, int len)
-{
-	struct ar5523_write_mac write;
-	int xferlen;
-	int error;
-
-	write.reg = cpu_to_be32(reg);
-	write.len = cpu_to_be32(len);
-	memcpy(write.data, data, len);
-
-	/* properly handle the case where len is zero (reset) */
-	xferlen = len ? 2 * sizeof(__be32) + len : sizeof(__be32);
-	error = ar5523_cmd_write(ar, AR5523_CMD_WRITE_MAC, &write, xferlen, 0);
-	if (error) {
-		ar5523_err(ar, "could not write %d bytes to register 0x%02x\n",
-			       len, reg);
-	}
-
-	return error;
-}
-
-static int ar5523_read_reg(struct ar5523 *ar, u32 reg, u32 *val)
-{
-	struct ar5523_read_mac read;
-	__be32 bereg = cpu_to_be32(reg);
-	int error;
-
-	error = ar5523_cmd_read(ar, AR5523_CMD_READ_MAC, &bereg,
-				sizeof(reg), &read, sizeof(read), 0);
-	if (error) {
-		ar5523_err(ar, "could not read register 0x%02x\n", reg);
-		return error;
-	}
-	
-	*val = be32_to_cpu(*(__be32 *)read.data);
-	return error;
-}
-#endif
 
 
 static int
@@ -542,7 +478,7 @@ ar5523_get_devcap(struct ar5523 *ar)
 	if (error != 0)					\
 		return (error);				\
 	printk("Cap: "			\
-	    "%s: %s=0x%08x\n", __func__, #x, cap);	\
+	    "%s=0x%08x\n", #x, cap);	\
 } while (0)
 	int error;
 	u32 cap;
@@ -585,35 +521,9 @@ ar5523_get_devcap(struct ar5523 *ar)
 	GETCAP(CAP_CIPHER_AES_CCM, cap->supportCipherAES_CCM);
 	GETCAP(CAP_CIPHER_TKIP, cap->supportCipherTKIP);
 	GETCAP(CAP_MIC_TKIP, cap->supportMicTKIP);
-
 //	cap->supportCipherWEP = 1;	/* NB: always available */
-
-	return (0);
-}
-
-
-#if 0
-
-static int ar5523_read_eeprom(struct ar5523 *ar, u32 reg, void *odata) 
-{
-        struct ar5523_read_mac read;
-	__be32 bereg = cpu_to_be32(reg);
-	int error;
-
-	error = ar5523_cmd_read(ar, AR5523_CMD_READ_EEPROM, &bereg,
-				sizeof(bereg), &read, sizeof(read), 0);
-	if (error) {
-		ar5523_err(ar, "could not read EEPROM offset 0x%02x\n", reg);
-		return error;
-	}
-
-	printk("About to copy %d bytes\n", read.len);
-
-//	memcpy(odata, read.data,
-//		read.len ? be32_to_cpu(read.len) : sizeof(__be32));
-	return error;
+	return 0;
 }
-#endif
 
 /*
  * Helpers.
@@ -626,7 +536,7 @@ static void ar5523_stat_work(struct work
 	 * Send request for statistics asynchronously. The timer will be
 	 * restarted when we'll get the stats notification.
 	 */
-	ar5523_cmd_write(ar, AR5523_CMD_STATS, NULL, 0, 0);
+	ar5523_cmd_write(ar, WDCMSG_TARGET_GET_STATS, NULL, 0, 0);
 }
 
 static void ar5523_stat(unsigned long arg)
@@ -699,6 +609,7 @@ static int ar5523_set_chan(struct ar5523
 
 	struct ar5523_cmd_reset reset;
 
+	printk("Set chan to %d\n", conf->channel->center_freq);
 	memset(&reset, 0, sizeof(reset));
 	reset.flags |= cpu_to_be32(UATH_CHAN_2GHZ);
 	reset.flags |= cpu_to_be32(UATH_CHAN_OFDM);
@@ -711,27 +622,6 @@ static int ar5523_set_chan(struct ar5523
 		   be32_to_cpu(reset.flags),
 		   conf->channel->center_freq);
 	return ar5523_cmd_write(ar, WDCMSG_RESET, &reset, sizeof reset, 0);
-
-#if 0
-
-
-
-	struct ar5523_set_chan chan;
-
-	memset(&chan, 0, sizeof(chan));
-	chan.flags  = cpu_to_be32(0x1400);
-	chan.freq   = cpu_to_be32(conf->channel->center_freq);
-	chan.magic1 = cpu_to_be32(20);
-	chan.magic2 = cpu_to_be32(50);
-	chan.magic3 = cpu_to_be32(1);
-
-	ar5523_dbg(ar, "switching to channel %d\n",
-		   ieee80211_frequency_to_channel(conf->channel->center_freq));
-
-	return ar5523_cmd_write(ar, AR5523_CMD_SET_CHAN,
-				&chan, sizeof(chan), 0);
-
-#endif
 }
 
 static int ar5523_wme_init(struct ar5523 *ar)
@@ -777,8 +667,6 @@ ar5523_switch_channel(struct ar5523 *ar)
 {
 	int error;
 
-
-	printk("%s\n", __func__);
 	/* set radio frequency */
 	error = ar5523_set_chan(ar);
 	if (error) {
@@ -815,41 +703,6 @@ failed:
 	return error;
 }
 
-
-static int ar5523_tx_null(struct ar5523 *ar)
-{
-	struct {
-		__be32 hdr;
-		struct ar5523_tx_desc desc;
-	} *p;
-	int foolen;
-	int error;
-
-	ar5523_dbg(ar, "ar5523_tx_null called\n");
-
-	p = kmalloc(sizeof(*p), GFP_KERNEL);
-	if (!p)
-		return -ENOMEM;
-
-	p->hdr = AR5523_MAKECTL(1, sizeof(struct ar5523_tx_desc));
-	memset(&p->desc, 0, sizeof(struct ar5523_tx_desc));
-	p->desc.len  = cpu_to_be32(sizeof(struct ar5523_tx_desc));
-	p->desc.type = cpu_to_be32(AR5523_TX_NULL);
-
-	error = usb_bulk_msg(ar->dev, ar5523_data_tx_pipe(ar->dev),
-			     p, sizeof(*p), &foolen, AR5523_DATA_TIMEOUT);
-	if (error) {
-		ar5523_err(ar, "error %d when submitting tx null urb\n", error);
-		goto out;
-	}
-
-	error = ar5523_cmd_write(ar, AR5523_CMD_0F, NULL, 0, AR5523_CMD_FLAG_ASYNC);
-
- out:
-	kfree(p);
-	return error;
-}
-
 static void ar5523_data_rx_cb(struct urb *urb)
 {
 	struct ar5523_rx_data *data = urb->context;
@@ -859,17 +712,16 @@ static void ar5523_data_rx_cb(struct urb
 	struct ieee80211_rx_status *rx_status;
 	int len = urb->actual_length;
 	int hdrlen, pad;
-	u32 hdr;
 	int error;
 
+	printk("RX\n");
 	/* sync/async unlink faults aren't errors */
 	if (urb->status && (urb->status != -ENOENT &&
 	    urb->status != -ECONNRESET && urb->status != -ESHUTDOWN)) {
 		ar5523_dbg(ar, "%s: nonzero write bulk status received: %d\n",
 			   __func__, urb->status);
 
-		return;
-//		goto skip;
+		goto skip;
 	}
 
 	if (urb->status) {
@@ -882,8 +734,6 @@ static void ar5523_data_rx_cb(struct urb
 		goto skip;
 	}
 
-	hdr = be32_to_cpu(*(__be32 *)data->skb->data);
-
 	/* Rx descriptor is located at the end, 32-bit aligned */
 	desc = (struct ar5523_rx_desc *)
 		(data->skb->data + len - sizeof(struct ar5523_rx_desc));
@@ -1010,6 +860,7 @@ static int ar5523_start(struct ieee80211
 
 	ar5523_dbg(ar, "start called\n");
 
+	mutex_lock(&ar->mutex);
 	val = cpu_to_be32(0);
 	ar5523_cmd_write(ar, WDCMSG_BIND, &val, sizeof val, 0);
 
@@ -1071,78 +922,8 @@ static int ar5523_start(struct ieee80211
 	ar5523_dbg(ar, "start OK\n");
 
 err:
+	mutex_unlock(&ar->mutex);
 	return error;
-
-
-#if 0
-
-
-
-#
-	return -1;
-
-	val = 0;
-	ar5523_cmd_write(ar, AR5523_CMD_02, &val, sizeof(val), 0);
-
-	/* set MAC address */
-	ar5523_write_multi(ar, 0x13, &ar->hw->wiphy->perm_addr,
-			   AR5523_ADDR_LEN);
-
-	ar5523_write_reg(ar, 0x02, 0x00000001);	//Rate control enable
-	ar5523_write_reg(ar, 0x0e, 0x0000003f);
-	ar5523_write_reg(ar, 0x10, 0x00000001);
-	ar5523_write_reg(ar, 0x06, 0x0000001e);
-
-	error = ar5523_alloc_rx_bufs(ar);
-	if (error)
-		goto out;
-
-	error = ar5523_cmd_read(ar, AR5523_CMD_07, NULL, 0, &val, sizeof(val),
-				AR5523_CMD_FLAG_MAGIC);
-	if (error) {
-		ar5523_err(ar, "could not send read command 07h\n");
-		goto out_free_rx_bufs;
-	}
-	
-	ar5523_dbg(ar, "command 07h return code: %x\n", be32_to_cpu(val));
-
-	error = ar5523_wme_init(ar);
-	if (error) {
-		ar5523_err(ar, "could not setup WME parameters\n");
-		return error;
-	}
-
-	/* init MAC registers */
-	ar5523_write_reg(ar, 0x19, 0x00000000);
-	ar5523_write_reg(ar, 0x1a, 0x0000003c);
-	ar5523_write_reg(ar, 0x1b, 0x0000003c);
-	ar5523_write_reg(ar, 0x1c, 0x00000000);
-	ar5523_write_reg(ar, 0x1e, 0x00000000);
-	ar5523_write_reg(ar, 0x1f, 0x00000003);
-	ar5523_write_reg(ar, 0x0c, 0x00000000);
-	ar5523_write_reg(ar, 0x0f, 0x00000002);
-	ar5523_write_reg(ar, 0x0a, 0x00000007);     /* XXX retry? */
-
-//	val = cpu_to_be32(4);
-//	ar5523_cmd_write(ar, AR5523_CMD_27, &val, sizeof(val), 0);
-//	ar5523_cmd_write(ar, AR5523_CMD_27, &val, sizeof(val), 0);
-	ar5523_cmd_write(ar, AR5523_CMD_1B, NULL, 0, 0);
-
-	/* enable Rx */
-	ar5523_set_rxfilter(ar, 0x0000, 4);
-	ar5523_set_rxfilter(ar, 0x0817, 1);
-
-	cmd31.magic1 = cpu_to_be32(0xffffffff);
-	cmd31.magic2 = cpu_to_be32(0xffffffff);
-	ar5523_cmd_write(ar, AR5523_CMD_31, &cmd31, sizeof(cmd31), 0);
-
-	return 0;
-
- out_free_rx_bufs:
-	ar5523_free_rx_bufs(ar);
- out:
- 	return error;
-#endif
 }
 
 static void ar5523_stop(struct ieee80211_hw *hw)
@@ -1152,6 +933,8 @@ static void ar5523_stop(struct ieee80211
 
 	ar5523_dbg(ar, "stop called\n");
 
+	mutex_lock(&ar->mutex);
+
 	ar5523_set_led(ar, AR5523_LED_LINK, 0);
 	ar5523_set_led(ar, AR5523_LED_ACTIVITY, 0);
 
@@ -1163,15 +946,21 @@ static void ar5523_stop(struct ieee80211
 	ar5523_cmd_write(ar, AR5523_CMD_15, &val, sizeof(val), 0);
 
 	ar5523_free_rx_bufs(ar);
+	mutex_unlock(&ar->mutex);
 }
 
 static int ar5523_set_rts_threshold(struct ieee80211_hw *hw, u32 value)
 {
 	struct ar5523 *ar = hw->priv;
+	int ret;
 
 	ar5523_dbg(ar, "set_rts_threshold called\n");
+	mutex_lock(&ar->mutex);
+
+	ret = ar5523_config(ar, CFG_USER_RTS_THRESHOLD, value);
 
-	return ar5523_write_reg(ar, 0x09, value);
+	mutex_unlock(&ar->mutex);
+	return ret;
 }
 
 static inline struct ar5523_tx_data *ar5523_get_tx_priv(struct sk_buff *skb)
@@ -1217,6 +1006,7 @@ static void ar5523_tx(struct ieee80211_h
 	int error = 0;
 	__be32 *hdr;
 
+	printk("TX!\n");
 	ar5523_dbg(ar, "tx called\n");
 
 	if (atomic_read(&ar->tx_data_queued) >= AR5523_TX_DATA_COUNT) {
@@ -1284,16 +1074,14 @@ static int ar5523_add_interface(struct i
 
 	ar5523_dbg(ar, "add interface called\n");
 
-	/* NOTE: using NL80211_IFTYPE_MONITOR to indicate no mode selected */
-	if (ar->mode != NL80211_IFTYPE_MONITOR) {
+	if (ar->vif) {
 		ar5523_dbg(ar, "invalid add_interface\n");
 		return -EOPNOTSUPP;
 	}
 
 	switch (vif->type) {
 	case NL80211_IFTYPE_STATION:
-	case NL80211_IFTYPE_MONITOR:
-		ar->mode = vif->type;
+		ar->vif = vif;
 		break;
 	default:
 		return -EOPNOTSUPP;
@@ -1309,7 +1097,7 @@ static void ar5523_remove_interface(stru
 
 	ar5523_dbg(ar, "remove interface called\n");
 
-	ar->mode = NL80211_IFTYPE_MONITOR;
+	ar->vif = NULL;
 }
 
 
@@ -1319,53 +1107,15 @@ static int ar5523_hwconfig(struct ieee80
 {
 	struct ar5523 *ar = hw->priv;
 
+	mutex_lock(&ar->mutex);
 	ar5523_dbg(ar, "config called\n");
 	if (changed & IEEE80211_CONF_CHANGE_CHANNEL) {
 		ar5523_dbg(ar, "Do channel switch\n");
 		ar5523_switch_channel(ar);
 	}
+	mutex_unlock(&ar->mutex);
 
 	return 0;
-
-#if 0
-
-	/* set radio frequency */
-	error = ar5523_set_chan(ar, conf);
-	if (error) {
-		ar5523_err(ar, "could not set channel\n");
-		return error;
-	}
-
-	/* reset Tx rings */
-	error = ar5523_reset_tx_queues(ar);
-	if (error) {
-		ar5523_err(ar, "could not reset Tx queues\n");
-		return error;
-	}
-
-	/* set Tx rings WME properties */
-	error = ar5523_wme_init(ar);
-	if (error) {
-		ar5523_err(ar, "could not setup WME parameters\n");
-		return error;
-	}
-
-	val = 0;
-	error = ar5523_cmd_write(ar, AR5523_CMD_SET_STATE,
-				 &val, sizeof(val), 0);
-	if (error) {
-		ar5523_err(ar, "could not set state\n");
-		return error;
-	}
-
-	error = ar5523_tx_null(ar);
-	if (error) {
-		ar5523_err(ar, "submitting null tx failed\n");
-		return error;
-	}
-
-	return 0;
-#endif
 }
 
 static void ar5523_create_rateset(struct ar5523 *ar,
@@ -1380,7 +1130,6 @@ static void ar5523_create_rateset(struct
 	u32 sta_rate_set;
 
 
-
 	if (basic)
 		sta_rate_set = bss_conf->basic_rates;
 	else {
@@ -1417,7 +1166,7 @@ static int ar5523_set_basic_rates(struct
 	rates.size   = cpu_to_be32(sizeof(struct ar5523_cmd_rateset));
 	ar5523_create_rateset(ar, vif, bss, &rates.rateset, true);
 
-	return ar5523_cmd_write(ar, AR5523_CMD_SET_BASIC_RATES,
+	return ar5523_cmd_write(ar, WDCMSG_SET_BASIC_RATE,
 	    &rates, sizeof rates, 0);
 }
 
@@ -1441,7 +1190,7 @@ ar5523_create_connection(struct ar5523 *
 	else
 		create.connattr.wlanmode = cpu_to_be32(WLAN_MODE_11b);
 
-	return ar5523_cmd_write(ar, AR5523_CREATE_CONNECTION, &create,
+	return ar5523_cmd_write(ar, WDCMSG_CREATE_CONNECTION, &create,
 	    sizeof create, 0);
 
 }
@@ -1456,7 +1205,7 @@ ar5523_write_associd(struct ar5523 *ar,
 	associd.associd = cpu_to_be32(bss->aid);
 	associd.timoffset = cpu_to_be32(0x3b);	/* XXX */
 	memcpy(associd.bssid, bss->bssid, ETH_ALEN);
-	return ar5523_cmd_write(ar, AR5523_WRITE_ASSOCID, &associd,
+	return ar5523_cmd_write(ar, WDCMSG_WRITE_ASSOCID, &associd,
 	    sizeof associd, 0);
 }
 
@@ -1468,17 +1217,14 @@ static void ar5523_bss_info_changed(stru
 		u32 changed)
 {
 	struct ar5523 *ar = hw->priv;
-//	struct ar5523_cmd_bssid bssid;
-//	struct ar5523_cmd_0b cmd0b;
-//	__be32 val;
 	int error;
 
 	ar5523_dbg(ar, "bss_info_changed called\n");
 
-	ar5523_cmd_write(ar, AR5523_CMD_24, NULL, 0, 0);
+	mutex_lock(&ar->mutex);
 
 	if (!(changed & BSS_CHANGED_ASSOC))
-		return;
+		goto out_unlock;
 
 	if (bss->assoc) {
 		error = ar5523_create_connection(ar, vif, bss);
@@ -1499,7 +1245,6 @@ static void ar5523_bss_info_changed(stru
 			return;
 		}
 
-
 		/* turn link LED on */
 		ar5523_set_led(ar, AR5523_LED_LINK, 1);
 
@@ -1514,32 +1259,9 @@ static void ar5523_bss_info_changed(stru
 		ar5523_set_led(ar, AR5523_LED_LINK, 0);
 		ar5523_set_led(ar, AR5523_LED_ACTIVITY, 0);
 	}
-#if 0
-	memset(&cmd0b, 0, sizeof(cmd0b));
-	cmd0b.code = cpu_to_be32(2);
-	cmd0b.size = cpu_to_be32(sizeof (cmd0b.data));
-	ar5523_cmd_write(ar, AR5523_CMD_0B, &cmd0b, sizeof(cmd0b), 0);
-
-	memset(&cmd0c, 0, sizeof(cmd0c));
-	cmd0c.magic1 = cpu_to_be32(2);
-	cmd0c.magic2 = cpu_to_be32(7);
-	cmd0c.magic3 = cpu_to_be32(1);
-	ar5523_cmd_write(ar, 0x0c, &cmd0c, sizeof(cmd0c), 0);
-#endif
-
 
-
-#if 0
-	val = cpu_to_be32(1);
-	ar5523_cmd_write(ar, AR5523_CMD_2E, &val, sizeof(val), 0);
-
-	memset(&bssid, 0, sizeof(bssid));
-	bssid.flags1 = cpu_to_be32(0xc004);
-	bssid.flags2 = cpu_to_be32(0x003b);
-	bssid.len    = cpu_to_be32(AR5523_ADDR_LEN);
-	memcpy(&bssid.bssid, &ifconf->bssid, AR5523_ADDR_LEN);
-	ar5523_cmd_write(ar, AR5523_CMD_SET_BSSID, &bssid, sizeof(bssid), 0);
-#endif
+out_unlock:
+	mutex_unlock(&ar->mutex);
 
 }
 
@@ -1549,10 +1271,12 @@ static void ar5523_configure_filter(stru
 {
 	struct ar5523 *ar = hw->priv;
 
+	mutex_lock(&ar->mutex);
 	ar5523_dbg(ar, "configure_filter called\n");
 
 	/* XXX: implement properly */
 	*total_flags = 0;
+	mutex_unlock(&ar->mutex);
 }
 
 static const struct ieee80211_ops ar5523_ops = {
@@ -1896,8 +1620,7 @@ static int ar5523_probe(struct usb_inter
 
 	setup_timer(&ar->stat_timer, ar5523_stat, (unsigned long)ar);
 
-	ar->mode = NL80211_IFTYPE_MONITOR;
-
+	ar->vif = NULL;
 	hw->flags = IEEE80211_HW_RX_INCLUDES_FCS |
 		    IEEE80211_HW_SIGNAL_DBM |
 		    IEEE80211_HW_HAS_RATE_CONTROL;
--- a/drivers/net/wireless/ath/ar5523/ar5523.h
+++ b/drivers/net/wireless/ath/ar5523/ar5523.h
@@ -158,6 +158,17 @@ struct uath_cmd_host_available {
 #define	ATH_SW_VER_BUILD	9999
 
 
+struct ar5523_chunk {
+	u8		seqnum;		/* sequence number for ordering */
+	u8		flags;
+#define	UATH_CFLAGS_FINAL	0x01	/* final chunk of a msg */
+#define	UATH_CFLAGS_RXMSG	0x02	/* chunk contains rx completion */
+#define	UATH_CFLAGS_DEBUG	0x04	/* for debugging */
+	__be16		length;		/* chunk size in bytes */
+	/* chunk data follows */
+} __packed;
+
+
 struct ar5523_rx_desc {
 	__be32		len;
 	__be32		reserved1[8];
@@ -335,17 +346,6 @@ struct ar5523_cmd_crypto {
 };
 
 
-/* structure for command AR5523_CMD_SET_CHAN */
-struct ar5523_set_chan {
-	__be32		flags;
-	__be32		freq;
-	__be32		magic1;
-	__be32		magic2;
-	__be32		reserved1;
-	__be32		magic3;
-	__be32		reserved2;
-};
-
 /* structure for command AR5523_CMD_SET_QUEUE */
 struct ar5523_qinfo {
 	__be32		qid;
@@ -362,13 +362,6 @@ struct ar5523_qinfo {
 	__be32		magic2;
 };
 
-/* structure for command AR5523_CMD_31 */
-struct ar5523_cmd_31 {
-	__be32		magic1;
-	__be32		magic2;
-};
-
-
 
 struct ar5523_cmd_rx_filter {		/* WDCMSG_RX_FILTER */
 	__be32	bits;
